//旋转的本质：(i,j)<-(matrix.length-1-j,i)
//在逐个更新矩阵元素的过程中，后更新的元素实际需要更新的值可能在之前就更新过了
//因此在某个元素更新时，用memo记录其初始值
//当后面元素需要引用其值来更新时，应该先从memo中找它的初始值
//如果在memo中找不到，说明它未被更新过，直接用它现在的值进行更新即可

var rotate = function(matrix) {
    var memo={}
    var n=matrix.length-1
    for(var i of matrix[0].keys())
    {
        for(var j of matrix[0].keys())
        {
            if(memo[""+(n-j)+","+i]===undefined)//行列间不加分隔符的话，1行11列和11列1行的键是一样的
            {
                if(memo[""+i+","+j]===undefined)//只保留每个位置初始值
                {memo[""+i+","+j]=matrix[i][j]}
                matrix[i][j]=matrix[n-j][i]
            }
            else
            {
                if(memo[""+i+","+j]===undefined)
                {memo[""+i+","+j]=matrix[i][j]}
                matrix[i][j]=memo[""+(n-j)+","+i]
            }
        }
    }
    return matrix
};
var m=[[97,49,34,40,59,5,57,22,26,156,17,91,153],
    [89,108,147,96,57,-1,116,99,64,111,136,46,136],
    [112,83,131,5,126,89,83,161,130,143,167,47,25],
    [53,35,43,146,20,162,86,-1,90,145,27,66,104],
    [92,10,100,-1,6,72,83,167,79,70,88,22,63],
    [50,167,91,126,52,145,162,125,123,42,119,70,70],
    [41,47,98,109,11,51,148,113,51,14,17,163,13],
    [125,65,102,149,158,12,7,81,139,60,58,161,17],
    [42,35,137,113,106,39,20,65,8,32,145,157,5],
    [28,31,24,51,46,150,146,149,159,136,22,167,49],
    [162,88,136,156,106,10,51,104,152,18,3,4,84],
    [12,66,61,29,72,118,61,125,29,136,136,7,146],
    [127,3,0,155,81,22,75,78,10,41,117,91,5]]
var m1=[[1,2,3],[4,5,6],[7,8,9]]
console.log(rotate(m1));